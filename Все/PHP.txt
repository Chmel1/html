	PHP
	
	require и include - обе директивы подключают какие либо файлы ПРИМЕР require "file.php"; разница между include и require 
		только в том что в require если файл не найден дальше программа не будет работать а при include работа сайта продолжиться
		только без подключенного файла
		
	Так же есть require_once и include_once - которые отличаются тем что если два раза прописать подключение одного файла то 
		код в файле не будет повторяться а если использовать обычный include то код файла выведиться два раза
		
	Атрибут method = "post" - Указывается внутри тега <form> и определяет метод отправки данных формы на сервер 
	
	Функция print_r($_POST); - используется для вывода содержимого массива $_POST которые хранит данные отправленные через 
		метод post из HTML-формы (создается асоциативный массив)
		
	Функция md5 - применяется к паролям для кеширования (чтобы место 123123 было f5bb0c8de146c67b44babbf4e6584cc0)
		Но так же есть функция password_hash которая на данный момент на много лучше чем md5 так как является безопаснее и практичней
	Функция date('') - функция для вывода даты ПРИМЕР ЗАПИСИ date('d m y') сайт - date format for php
		Функция strtotime("") - функция используется для добавления или убавления времени в date() ПРИМЕР - echo date('m-d H:i:s', strtotime("now"));
		
	Функции для работы с массивами:
		Функция unset(arr[]) - функция для удаления элемента массива по индексу
		Функция array_values(arr) - функция для обнавления индексов массива(чтобы они шли по порядку)
		Функция sort(arr) - сортирует от меньшего к большему 
		Функция rsort(arr) - сортирует от большого к меньшему
		Функция shuffle(arr) - сортирует элементы в хаотичном порядке
		Фунцкия in_array(элемент,arr) - осуществляет поиск по массиву элемента который вписывается в скобки
		Функция array_slice(arr, от элемента, до элемента) - обрезает массив и возвращает обрезанный массив
		Функция array_merge(arr1, arr2) - функция позваляет объеденить массивы в один
		
	Функции для работы с перменными:
		Функция gettype($a) - функция возвращает тип данных переменной
		Функция is_numeric($a) - функция возвращает 1 если это число или 0 если это не число
		
	Функции для работы со строками:
		Функция strpos($str,"элемент") - функция осуществляет поиск по строке и выводит индекс найденого элемента
		
	
	Работа с файлами
		Функция fopen("название файла","тип записи(w-write,r-read)") - функция позваляет открыть файл или создать новый и открыть его как для 
			редактирования(r) так и для записи(w) или же и так и так(wr) так же есть (a) - позваляет изменять файл а не переписывать его
		
		Функция fclose($file) - функция используется для закрытия файла обязаетльна если вы использовали функцию fopen()
		
		Функция fwrite($file,"текст который вы хотите ввести в файл") - функция вводит файл ваш введеный текст
		
		Функция fread($file, filesize("Название файла")) - функция используется для чтения файла
		
		Функция file_put_contents("Имя файла","данные ввода") - функция открывает файл добавляет данные и закрывает файл это намного кароче 
			чем использовать прошлые функции
		
		Функция file_get_contents("Имя файла") - функция возвращает данные файла в виде строки 

Функция phpinfo() - функция выводит всю информацию о вашем php на сайте

$_SERVER - суперглобальный массив в PHP который содержит информацию о сервере и текущем запросе
$_SERVER['HTTPS'] - проверка на использование защитного протокола HTTPS для текущего соеденения
$_SERVER['HTTP_HOST'] - выводит домен сайта
$_SERVER['REQUEST_URI'] - выведит все после домена
$_SERVER ['HTTP_USER_AGENT'] - выводит информацию о ОС пользователя


Отправка почты на php В телеграмме

Работа с куки 
	Функция setcookie(имя,         // Название куки
						значение,    // Значение куки
						время,       // Время истечения
						путь,        // Доступность куки для определенного пути
						домен,       // Доступность для определенного домена
						secure,      // Отправлять только через HTTPS
						httponly     // Доступность только через HTTP (недоступно JavaScript)) -  
	в PHP используется для установки куки (cookie) — небольших данных, которые сохраняются на стороне клиента (в браузере) 
	и могут быть использованы для хранения информации между запросами, например, для авторизации пользователей или сохранения пользовательских настроек.
	Функция session_start(); - Запускает ссесию.
		Cессия позваляет сохранять данные на сервере и связывать их с определенным пользователем, что полезно для управления авторизацией, отслеживания
		состояния или сохранения временных данных.
		
	//10.11.24
	$_GET - суперглобальынй массив, используемый для получения данных из URL, которые передаются методом GET. В этом массиве сохраняются все параметры, 
			которые идут в строке запроса(то есть после знака ? в URL)
	
	$_POST -  суперглобальный массив, исползуемый для получения данных, которые передаются методом POST. Этот метод чаще всего используется в формах
				где данные отправляются на сервер внутри HTTP запроса а не черех URL что делает его более подходящим для передачи чувствительной нформации 
				такой как праоли данные авторизации и тому подобное
				
	abs() - используется для вычисления абсолютного значения
	
	round() - используется для округления числа. Оно позваляет округлить как в меньшую так и в больлшую сторону
	
	floor() - используется для округления числа в меньшую сторону то есть при 3.99 выведет 3
	
	ceil() - используется для округления числа в большую сторону то есть при 3.01 выведет 4
	
	pow(число,степень) - используется для возведения числа в степень
	
	sqrt() - вычисляет квадратный корень из числа
	
	max() - выведет максимальное число из представленных 
	
	min() - выведет минимальное число из представленных
	
	pi() - число Пи
	
	rand(первое число, второе число) - метод для рандомного числа 
	
	//11.11.24
	
	array_push(МАССИВ,Элементы) - используется для добавления одного или нескольких элементов в конец массива 
	
	array_pop() - используется для удаления и возврата последнего элемента из массива
	
	array_shift() -  испольщуется для удаления и возвращения первого  элемента из массива 
	
	array_reverse() - возвращает новый масиив с обртаным порядком выбранного массива
	
	count() - возвращает количество элементов в массиве или длину объекта 
	
	array_keys() - Возвращает новый массив с ключами асоциативного массива
	
	array_values() - возвращает новый массив с значениями асоциативного массива
	
	array_flip() - возвращает новый асоциативный массив который меняет местами ключи и значения 
	
	isset() - используется для проверки, устанволено ли значение переменной и не является ли оно null. 
				Оно вощвращает true если переменная существует а иначе возвращает false
				
	empty() - используется для проверки пустая переменная или нет если она пустая вернет true иначе false
	
	14.11.24 
	
	 strtolower() - преобразует строку в нижний регистр
	 strtoupper() - преобразует строку в верхний регистр
	 trim() - удалит все пробелы до и после 
	 str_pad() - используется для дополнения строки до заданной длины определеными символами
	 str_replace(поиск,замена,строка) - заменяет определеные символы или подстроки на другие символы или подстроки
	 strrev() - преворачивает строку 
	 str_shuffle() - меняет каждый элемент строки в рандомном порядке
	 strcmp() - сравнивает две строки посимвольно и возвращает целое число 
				0, если строки равны;
				Отрицательное значение, если строка1 меньше строка2;
				Положительное значение, если строка1 больше строка2.
	strlen() - возвпащает длину строки 
	Функция explode("элемент разделения строки", $str) - функция создает из строки массив 
	Функция implode ("элемент соеденения", $str) - функция преобразует массив в строку 
	Функция filter_input() в PHP используется для получения и фильтрации данных из внешних источников, таких как $_GET, $_POST, $_COOKIE, $_SERVER и т. д. Она позволяет проверять и очищать входные данные, что помогает защитить приложение от вредоносных данных и XSS-атак.
Синтаксис

filter_input(тип_данных, имя_переменной, фильтр, [опции]);

    тип_данных — определяет источник данных. Основные типы:
        INPUT_GET — для данных из $_GET.
        INPUT_POST — для данных из $_POST.
        INPUT_COOKIE — для данных из $_COOKIE.
        INPUT_SERVER — для данных из $_SERVER.
        INPUT_ENV — для данных из переменных окружения.

    имя_переменной — имя переменной, которую необходимо фильтровать.

    фильтр (необязательно) — тип фильтра, применяемого к данным. Можно использовать встроенные фильтры,
	такие как FILTER_SANITIZE_STRING, FILTER_VALIDATE_EMAIL, FILTER_VALIDATE_INT и т.д. 
	Если фильтр не указан, по умолчанию используется FILTER_DEFAULT, который не изменяет данные.
	
    опции (необязательно) — дополнительные параметры в виде массива для настройки фильтра. Например, можно указать диапазон значений для чисел.
		Часто используемые фильтры

		FILTER_VALIDATE_INT — проверяет, является ли значение целым числом.
		FILTER_VALIDATE_BOOLEAN — проверяет, является ли значение булевым.
		FILTER_VALIDATE_EMAIL — проверяет, является ли значение допустимым email.
		FILTER_VALIDATE_URL — проверяет, является ли значение корректным URL.
		FILTER_SANITIZE_STRING — очищает строку от нежелательных символов и HTML-тегов.
		FILTER_SANITIZE_EMAIL — удаляет нежелательные символы из email.	
		
	
	Функция setcookie() в PHP используется для создания или обновления куки (cookie) — небольших данных, хранящихся в браузере пользователя. 
		Куки могут быть использованы для хранения информации о пользователе, таких как имя, настройки, идентификатор сессии и т. д.
		Синтаксис
		setcookie(имя, значение, [время_истечения], [путь], [домен], [безопасность], [httponly]);
				имя — имя куки. Оно должно быть уникальным для идентификации.
				
				значение — значение, которое будет храниться в куки. Если указать null, куки будут удалены.
				
				время_истечения (необязательно) — время, до которого куки будут активны. Указывается в формате Unix Timestamp (количество секунд с 1 января 1970 года). Если не указано, куки будут работать только в течение текущей сессии.
				
				путь (необязательно) — путь на сервере, где куки будут доступны. По умолчанию — текущая директория (/ делает куки доступными для всего сайта).
				
				домен (необязательно) — домен, на котором куки будут доступны. Полезно для поддоменов.
				
				безопасность (необязательно) — флаг безопасности. Если true, куки будут отправляться только через HTTPS.
				
				httponly (необязательно) — флаг, запрещающий доступ к куки через JavaScript. Это улучшает безопасность.
				
	
	Функция session_start() в PHP запускает новую сессию или продолжает существующую. 
		Сессии позволяют сохранять данные между запросами пользователя, 
		что делает их удобным инструментом для управления состоянием, 
		авторизацией и передачей данных между страницами.
		
	$_SESSION — это суперглобальный массив в PHP, который используется для хранения данных сессии. 
		Данные, сохранённые в этом массиве, доступны на всех страницах текущей сессии, пока сессия 
		не завершена или данные не удалены.
		
	Основные особенности

    Глобальная доступность: Переменные, сохранённые в $_SESSION, доступны на любой странице, где вызван session_start().
    Сохранение на сервере: Данные сессии хранятся на сервере (по умолчанию в файлах), 
		а клиенту передаётся только идентификатор сессии (session ID) через куки.
    Долгосрочность: Сессии могут сохраняться между запросами до истечения времени действия или ручного удаления.
	
	Функция header() в PHP используется для отправки HTTP-заголовков браузеру до вывода какого-либо содержимого на страницу. 
		HTTP-заголовки позволяют управлять поведением браузера и сервера, например, перенаправлять пользователя, 
		указывать тип контента или задавать кэширование.
		
		Заголовок Location: используется для перенаправления: header("Location: http://example.com");
	
	password_verify() — это встроенная функция в PHP, которая используется для проверки соответствия введённого пароля его хэшу. 
		Она обычно применяется при авторизации, чтобы сравнить пароль, введённый пользователем, с хранимым хэшем пароля.
	
	Синтаксис
	bool password_verify(string $password, string $hash);

    $password — пароль, введённый пользователем (обычно в незашифрованном виде).
    $hash — хэш пароля, который был сгенерирован ранее (например, с помощью password_hash()).
	
		Пример подключения базы данных в php
		
			<?php 
				$db_server = "MySQL-8.2";
				$db_user = "root";
				$db_password = "";
				$db_name = "testDb";

				try {
					$connection = new mysqli($db_server, $db_user, $db_password, $db_name);

					// Проверяем на ошибки подключения
					if ($connection->connect_error) {
						throw new Exception("Ошибка подключения: " . $connection->connect_error);
					}

					
				} catch (Exception $e) {
					echo "Ошибка подкючения: " . $e->getMessage(). "<br>";
				}
			?>
			
	Функция mysqli_num_rows() в PHP используется для получения количества строк в результате выполнения SQL-запроса, 
			который должен возвращать результат (например, запрос SELECT).
	
	Функция mysqli_fetch_assoc() используется для извлечения строки из результата SQL-запроса 
			в виде ассоциативного массива, где ключами являются имена столбцов базы данных.